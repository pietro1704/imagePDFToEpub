import ImagePDFToEpub from './index.js';

async function example() {
    const converter = new ImagePDFToEpub();
    
    console.log('üöÄ Exemplo de uso do Image PDF to EPUB Converter');
    console.log('================================================');
    
    // Exemplo de uso program√°tico
    try {
        // Substitua pelo caminho do seu PDF
        const pdfPath = './sample.pdf';
        
        console.log(`üìñ Convertendo: ${pdfPath}`);
        
        const result = await converter.convertImagePDFToEpub(pdfPath);
        
        console.log('\nüìä Estat√≠sticas da convers√£o:');
        console.log(`‚è±Ô∏è  Tempo total: ${result.processingTime.toFixed(2)} minutos`);
        console.log(`üìÑ Total de p√°ginas: ${result.ocrResults.length}`);
        
        // Calcular confian√ßa m√©dia do OCR
        const avgConfidence = result.ocrResults.reduce((sum, page) => sum + page.confidence, 0) / result.ocrResults.length;
        console.log(`üéØ Confian√ßa m√©dia do OCR: ${avgConfidence.toFixed(2)}%`);
        
        console.log('\nüìÅ Arquivos gerados:');
        console.log(`üìÑ PDF de texto: ${result.textPdf}`);
        console.log(`üìö EPUB: ${result.epub}`);
        
        // Estat√≠sticas detalhadas por p√°gina
        console.log('\nüìã Detalhes por p√°gina:');
        result.ocrResults.forEach((page, index) => {
            const wordCount = page.text.split(/\s+/).filter(word => word.length > 0).length;
            console.log(`  P√°gina ${index + 1}: ${wordCount} palavras (${page.confidence.toFixed(1)}% confian√ßa)`);
        });
        
    } catch (error) {
        console.error('‚ùå Erro na convers√£o:', error.message);
    }
}

// Fun√ß√£o para usar com configura√ß√µes personalizadas
async function advancedExample() {
    const converter = new ImagePDFToEpub();
    
    console.log('\nüîß Exemplo com configura√ß√µes avan√ßadas');
    console.log('=====================================');
    
    // Voc√™ pode acessar m√©todos individuais para mais controle
    try {
        const pdfPath = './sample.pdf';
        
        // 1. Converter PDF para imagens
        const images = await converter.convertPDFToImages(pdfPath, {
            density: 400, // Alta densidade para melhor qualidade
            width: 3000,
            height: 4000
        });
        
        console.log(`üì∏ ${images.length} imagens extra√≠das`);
        
        // 2. Processar cada imagem
        const ocrResults = [];
        for (const imagePath of images) {
            // Pr√©-processar imagem
            const processedImage = await converter.preprocessImage(imagePath, {
                brightness: 1.2,
                contrast: 1.4
            });
            
            // OCR com idiomas espec√≠ficos
            const ocrResult = await converter.performOCR(processedImage, 'por+eng+spa'); // Portugu√™s, Ingl√™s, Espanhol
            ocrResults.push(ocrResult);
        }
        
        // 3. Criar outputs
        const textPdf = await converter.createTextPDF(ocrResults, 'exemplo_avancado');
        const epub = await converter.createEPUB(ocrResults, 'exemplo_avancado');
        
        console.log(`‚úÖ Convers√£o avan√ßada conclu√≠da!`);
        console.log(`üìÑ PDF: ${textPdf}`);
        console.log(`üìö EPUB: ${epub}`);
        
        // Limpar arquivos tempor√°rios
        await converter.cleanup();
        
    } catch (error) {
        console.error('‚ùå Erro na convers√£o avan√ßada:', error.message);
    }
}

// Executar exemplos
if (import.meta.url === `file://${process.argv[1]}`) {
    example()
        .then(() => advancedExample())
        .then(() => console.log('\nüéâ Exemplos conclu√≠dos!'))
        .catch(error => console.error('‚ùå Erro nos exemplos:', error));
}